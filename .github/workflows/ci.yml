name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "deploy" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Créer .env.dev à partir des secrets
        run: |
          touch .env.dev
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.dev
          # ajoute les autres secrets ici...

      - name: Install dependencies
        if: hashFiles('package.json') != ''
        run: npm install

      - name: Run tests
        if: hashFiles('__tests__/**') != ''
        run: npm test -- --watchAll=false

  deploy:
    if: github.ref == 'refs/heads/deploy'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Créer .env.dev pour le deploy
        run: |
          touch .env.dev
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.dev
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env.dev
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env.dev
          echo "GOOGLE_OAUTH_URL=${{ secrets.GOOGLE_OAUTH_URL }}" >> .env.dev
          echo "GOOGLE_ACCESS_TOKEN_URL=${{ secrets.GOOGLE_ACCESS_TOKEN_URL }}" >> .env.dev
          echo "GOOGLE_TOKEN_INFO_URL=${{ secrets.GOOGLE_TOKEN_INFO_URL }}" >> .env.dev
          echo "GOOGLE_CALLBACK_URL=${{ secrets.GOOGLE_CALLBACK_URL }}" >> .env.dev
          echo "URL=${{ secrets.URL }}" >> .env.dev
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env.dev
          echo "BDD_SERVICE_URL=${{ secrets.BDD_SERVICE_URL }}" >> .env.dev
          echo "NOTIFICATION_SERVICE_URL=${{ secrets.NOTIFICATION_SERVICE_URL }}" >> .env.dev
          echo "PORT=${{ secrets.PORT }}" >> .env.dev

      - name: Set lowercase Docker user
        run: echo "DOCKER_USER=$(echo ${{ github.actor }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ env.DOCKER_USER }}/auth:latest .

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Push Docker image
        run: docker push ghcr.io/${{ env.DOCKER_USER }}/auth:latest
